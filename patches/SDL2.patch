diff -r a5270cef21a7 src/core/android/SDL_android.c
--- a/src/core/android/SDL_android.c	Tue Dec 03 12:09:58 2013 -0300
+++ b/src/core/android/SDL_android.c	Wed Dec 04 21:38:20 2013 -0800
@@ -49,6 +49,16 @@
 /* Uncomment this to log messages entering and exiting methods in this file */
 /* #define DEBUG_JNI */
 
+#ifndef SDL_PREFIX
+    #pragma warning Defaulting to org.libsdl.app
+	#define SDL_PREFIX		org_libdl_app
+#endif
+
+#define CONCAT1(p,f)	CONCAT2(p,f)
+#define CONCAT2(p,f)	Java_ ## p ## _ ## f
+
+#define JNI(f)			CONCAT1(SDL_PREFIX,f)
+
 static void Android_JNI_ThreadDestroyed(void*);
 
 /*******************************************************************************
@@ -140,7 +150,7 @@
 }
 
 /* Resize */
-void Java_org_libsdl_app_SDLActivity_onNativeResize(
+void JNI(SDLActivity_onNativeResize)(
                                     JNIEnv* env, jclass jcls,
                                     jint width, jint height, jint format)
 {
@@ -173,7 +183,7 @@
 
 
 /* Surface Created */
-void Java_org_libsdl_app_SDLActivity_onNativeSurfaceChanged(JNIEnv* env, jclass jcls)
+void JNI(SDLActivity_onNativeSurfaceChanged)(JNIEnv* env, jclass jcls)
 {
     SDL_WindowData *data;
     SDL_VideoDevice *_this;
@@ -199,7 +209,7 @@
 }
 
 /* Surface Destroyed */
-void Java_org_libsdl_app_SDLActivity_onNativeSurfaceDestroyed(JNIEnv* env, jclass jcls)
+void JNI(SDLActivity_onNativeSurfaceDestroyed)(JNIEnv* env, jclass jcls)
 {
     /* We have to clear the current context and destroy the egl surface here
      * Otherwise there's BAD_NATIVE_WINDOW errors coming from eglCreateWindowSurface on resume
@@ -225,27 +235,51 @@
 
 }
 
-void Java_org_libsdl_app_SDLActivity_nativeFlipBuffers(JNIEnv* env, jclass jcls)
+void JNI(SDLActivity_nativeFlipBuffers)(JNIEnv* env, jclass jcls)
 {
     SDL_GL_SwapWindow(Android_Window);
 }
 
+/* Paddown */
+void JNI(SDLActivity_onNativePadDown)(
+                                                     JNIEnv* env, jclass jcls,
+                                                     jint padId, jint keycode)
+{
+    Android_OnPadDown(padId, keycode);
+}
+
+/* Padup */
+void JNI(SDLActivity_onNativePadUp)(
+                                                   JNIEnv* env, jclass jcls,
+                                                   jint padId, jint keycode)
+{
+    Android_OnPadUp(padId, keycode);
+}
+
+/* OnJoy */
+void JNI(SDLActivity_onNativeJoy)(
+                                                 JNIEnv* env, jclass jcls,
+                                                 jint joyId, jint axis, jdouble value)
+{
+    Android_OnJoy(joyId, axis, value);
+}
+
 /* Keydown */
-void Java_org_libsdl_app_SDLActivity_onNativeKeyDown(
+void JNI(SDLActivity_onNativeKeyDown)(
                                     JNIEnv* env, jclass jcls, jint keycode)
 {
     Android_OnKeyDown(keycode);
 }
 
 /* Keyup */
-void Java_org_libsdl_app_SDLActivity_onNativeKeyUp(
+void JNI(SDLActivity_onNativeKeyUp)(
                                     JNIEnv* env, jclass jcls, jint keycode)
 {
     Android_OnKeyUp(keycode);
 }
 
 /* Keyboard Focus Lost */
-void Java_org_libsdl_app_SDLActivity_onNativeKeyboardFocusLost(
+void JNI(SDLActivity_onNativeKeyboardFocusLost)(
                                     JNIEnv* env, jclass jcls)
 {
     /* Calling SDL_StopTextInput will take care of hiding the keyboard and cleaning up the DummyText widget */
@@ -254,7 +288,7 @@
 
 
 /* Touch */
-void Java_org_libsdl_app_SDLActivity_onNativeTouch(
+void JNI(SDLActivity_onNativeTouch)(
                                     JNIEnv* env, jclass jcls,
                                     jint touch_device_id_in, jint pointer_finger_id_in,
                                     jint action, jfloat x, jfloat y, jfloat p)
@@ -263,7 +297,7 @@
 }
 
 /* Accelerometer */
-void Java_org_libsdl_app_SDLActivity_onNativeAccel(
+void JNI(SDLActivity_onNativeAccel)(
                                     JNIEnv* env, jclass jcls,
                                     jfloat x, jfloat y, jfloat z)
 {
@@ -274,14 +308,14 @@
 }
 
 /* Low memory */
-void Java_org_libsdl_app_SDLActivity_nativeLowMemory(
+void JNI(SDLActivity_nativeLowMemory)(
                                     JNIEnv* env, jclass cls)
 {
     SDL_SendAppEvent(SDL_APP_LOWMEMORY);
 }
 
 /* Quit */
-void Java_org_libsdl_app_SDLActivity_nativeQuit(
+void JNI(SDLActivity_nativeQuit)(
                                     JNIEnv* env, jclass cls)
 {
     /* Discard previous events. The user should have handled state storage
@@ -297,7 +331,7 @@
 }
 
 /* Pause */
-void Java_org_libsdl_app_SDLActivity_nativePause(
+void JNI(SDLActivity_nativePause)(
                                     JNIEnv* env, jclass cls)
 {
     __android_log_print(ANDROID_LOG_VERBOSE, "SDL", "nativePause()");
@@ -314,7 +348,7 @@
 }
 
 /* Resume */
-void Java_org_libsdl_app_SDLActivity_nativeResume(
+void JNI(SDLActivity_nativeResume)(
                                     JNIEnv* env, jclass cls)
 {
     __android_log_print(ANDROID_LOG_VERBOSE, "SDL", "nativeResume()");
@@ -332,7 +366,7 @@
     }
 }
 
-void Java_org_libsdl_app_SDLInputConnection_nativeCommitText(
+void JNI(SDLInputConnection_nativeCommitText)(
                                     JNIEnv* env, jclass cls,
                                     jstring text, jint newCursorPosition)
 {
@@ -343,7 +377,7 @@
     (*env)->ReleaseStringUTFChars(env, text, utftext);
 }
 
-void Java_org_libsdl_app_SDLInputConnection_nativeSetComposingText(
+void JNI(SDLInputConnection_nativeSetComposingText)(
                                     JNIEnv* env, jclass cls,
                                     jstring text, jint newCursorPosition)
 {
@@ -1300,7 +1334,6 @@
     return (int)(*env)->CallIntMethod(env, mActivityClass, mid, joy);
 }
 
-
 /* sends message to be handled on the UI event dispatch thread */
 int Android_JNI_SendMessage(int command, int param)
 {
diff -r a5270cef21a7 src/joystick/android/SDL_sysjoystick.c
--- a/src/joystick/android/SDL_sysjoystick.c	Tue Dec 03 12:09:58 2013 -0300
+++ b/src/joystick/android/SDL_sysjoystick.c	Wed Dec 04 21:38:20 2013 -0800
@@ -341,10 +341,11 @@
 }
 
 int
-Android_OnJoy(int joyId, int axis, float value)
+Android_OnJoy(int joyId, int axis, double value)
 {
     /* Android gives joy info normalized as [-1.0, 1.0] or [0.0, 1.0] */
     /* TODO: Are the reported values right? */
+    SDL_Log("Android_OnJoy joyId: %d, axis: %d, value: %f, SYS_Joysticks: %8x", joyId, axis, value, SYS_Joysticks);
     if (SYS_Joysticks[joyId]) {
         SDL_PrivateJoystickAxis(SYS_Joysticks[joyId], axis, (Sint16) (32767.*value) );
     }
diff -r a5270cef21a7 src/joystick/android/SDL_sysjoystick.h
--- a/src/joystick/android/SDL_sysjoystick.h	Tue Dec 03 12:09:58 2013 -0300
+++ b/src/joystick/android/SDL_sysjoystick.h	Wed Dec 04 21:38:20 2013 -0800
@@ -23,6 +23,6 @@
 
 extern int Android_OnPadDown(int padId, int keycode);
 extern int Android_OnPadUp(int padId, int keycode);
-extern int Android_OnJoy(int joyId, int axisnum, float value);
+extern int Android_OnJoy(int joyId, int axisnum, double value);
 
 /* vi: set ts=4 sw=4 expandtab: */
diff -r a5270cef21a7 src/main/android/SDL_android_main.c
--- a/src/main/android/SDL_android_main.c	Tue Dec 03 12:09:58 2013 -0300
+++ b/src/main/android/SDL_android_main.c	Wed Dec 04 21:38:20 2013 -0800
@@ -6,6 +6,27 @@
 /* Include the SDL main definition header */
 #include "SDL_main.h"
 
+#ifndef SDL_PREFIX
+    #pragma warning Defaulting to org.libsdl.app
+	#define SDL_PREFIX		org_libdl_app
+#endif
+
+#define CONCAT1(p,f)	CONCAT2(p,f)
+#define CONCAT2(p,f)	Java_ ## p ## _ ## f
+
+#define JNI(f)			CONCAT1(SDL_PREFIX,f)
+
+
+#ifndef SDL_PREFIX
+    #pragma warning Defaulting to org.libsdl.app
+	#define SDL_PREFIX		org_libdl_app
+#endif
+
+#define CONCAT1(p,f)	CONCAT2(p,f)
+#define CONCAT2(p,f)	Java_ ## p ## _ ## f
+
+#define JNI(f)			CONCAT1(SDL_PREFIX,f)
+
 /*******************************************************************************
                  Functions called by JNI
 *******************************************************************************/
@@ -15,7 +36,7 @@
 extern void SDL_Android_Init(JNIEnv* env, jclass cls);
 
 /* Start up the SDL app */
-void Java_org_libsdl_app_SDLActivity_nativeInit(JNIEnv* env, jclass cls, jobject obj)
+void JNI(SDLActivity_nativeInit)(JNIEnv* env, jclass cls, jobject obj)
 {
     /* This interface could expand with ABI negotiation, calbacks, etc. */
     SDL_Android_Init(env, cls);
